Java Core Concepts 

1. Control Flow Statements

ðŸ”¸ Conditional Statements

Definition: Conditional statements are used to perform different actions based on different conditions. They control the flow of execution depending on whether a condition is true or false.

Type: Decision-Making Statements

Statements:

if statement: Executes code block if condition is true.

if-else: Executes one block if condition is true, otherwise another block.

if-else-if ladder: Tests multiple conditions.

switch: Replaces multiple if-else when checking same variable or expression.

// if-else example
if (a > b) {
    System.out.println("A is greater");
} else {
    System.out.println("B is greater");
}

// switch example
int day = 2;
switch (day) {
  case 1: System.out.println("Sunday"); break;
  case 2: System.out.println("Monday"); break;
  default: System.out.println("Other day");
}

ðŸ”¸ Decision-Making Statements

Definition: Decision-making statements in Java are used to perform different actions based on certain conditions. They allow the program to make choices during execution by evaluating conditions that result in true or false.

ðŸ”¸ Looping Statements

Definition: Looping statements allow executing a block of code repeatedly as long as a specified condition is true.

Type: Looping Constructs

for loop:

for(int i = 0; i < 5; i++) {
    System.out.println(i);
}

while loop:

int i = 0;
while(i < 5) {
    System.out.println(i);
    i++;
}

do-while loop:

int i = 0;
do {
    System.out.println(i);
    i++;
} while(i < 5);

ðŸ”¸ Jump Statements

Definition: Jump statements are used to transfer control to another part of the program.

Type: Transfer of Control

break: Exits the loop prematurely.

continue: Skips the current iteration and jumps to the next iteration.

return: Exits from the current method.

// break example
for (int i = 1; i <= 5; i++) {
    if (i == 3) {
        break; // exits the loop when i is 3
    }
    System.out.println(i);
}

// continue example
for (int i = 1; i <= 5; i++) {
    if (i == 3) {
        continue; // skips printing when i is 3
    }
    System.out.println(i);
}

2. Arrays in Java

ðŸ”¸ Definition:

An array is a data structure that stores multiple values of the same type in a single variable.

ðŸ”¸ One-Dimensional Array

Declaration:

int[] arr;

Initialization:

arr = new int[5];

Declaration + Initialization:

int[] arr = {10, 20, 30, 40};

Traversal:

for (int i = 0; i < arr.length; i++) {
    System.out.println(arr[i]);
}

ðŸ”¸ Two-Dimensional Array

Declaration + Initialization:

int[][] matrix = {
    {1, 2},
    {3, 4},
    {5, 6}
};

Traversal:

for (int i = 0; i < matrix.length; i++) {
    for (int j = 0; j < matrix[i].length; j++) {
        System.out.print(matrix[i][j] + " ");
    }
    System.out.println();
}

3. Strings in Java

ðŸ”¸ String Class (Immutable)

Definition: String is an object that represents a sequence of characters. Once created, it cannot be changed.

Example:

String s1 = "Hello";
s1 = s1.concat(" World"); // Creates new string
System.out.println(s1); // Output: Hello World

4. StringBuffer

Definition: Mutable, thread-safe.

Example:

StringBuffer sb = new StringBuffer("Hello");
sb.append(" World");
System.out.println(sb); // Output: Hello World

5. StringBuilder

Definition: Mutable, not thread-safe, faster than StringBuffer.

Example:

StringBuilder sb = new StringBuilder("Hello");
sb.append(" Java");
System.out.println(sb); // Output: Hello Java

6. Common String Methods

String s = " Java Programming ";

length() â†’ s.length() â†’ returns number of characters.

charAt(i) â†’ s.charAt(2) â†’ character at index 2.

toLowerCase() â†’ s.toLowerCase()

toUpperCase() â†’ s.toUpperCase()

trim() â†’ s.trim() â†’ removes leading/trailing spaces.

substring(start, end) â†’ s.substring(0, 4) â†’ from index 0 to 3.

equals() / equalsIgnoreCase() â†’ compares strings.

contains("text") â†’ checks if substring exists.

replace("a", "b") â†’ replaces characters.

split(" ") â†’ splits string into array.

String[] words = s.split(" ");

